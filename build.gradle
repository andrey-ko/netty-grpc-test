import org.jetbrains.kotlin.gradle.internal.*

gradle.startParameter.showStacktrace = ShowStacktrace.ALWAYS
gradle.startParameter.logLevel = LogLevel.DEBUG

buildscript {
  repositories {
    mavenCentral()
    jcenter()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
  }
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"

    classpath "com.google.protobuf:protobuf-gradle-plugin:+"
    classpath "com.google.gradle:osdetector-gradle-plugin:+"

    classpath "com.satori:satori-libs-gradle-utils:$composerVersion"
    classpath "com.satori:satori-libs-gradle-docker:$composerVersion"
    classpath "com.satori:satori-libs-gradle-transform:$composerVersion"
    classpath "com.satori:satori-libs-gradle-codegen:$composerVersion"
    classpath "com.satori:satori-gradle-composer-plugin:$composerVersion"
  }
}

allprojects {
  group group
  version version
  buildDir = ".out"

  apply plugin: "com.google.osdetector"
  apply plugin: "com.satori.codegen"
  apply plugin: 'com.satori.docker'
  apply plugin: 'com.satori.transform'
  apply plugin: 'com.satori.composer'
  apply plugin: "idea"

  idea {
    module {
      inheritOutputDirs = false
      outputDir = file("$buildDir/idea")
      testOutputDir = file("$buildDir/idea-tests")
    }
  }
}

task build{
  group "build"
}

task generateCode{
  group "codegen"

  build.dependsOn it
}

apply plugin: "com.satori.codegen"
apply from: rootProject.file("readme.gradle")

ext {
  pckg = "$group.${codeFormatter.packageName(project.name)}"
  pckgDir = pckg.replace('.', '/')
  gitSha = null
  gitTags = null
}

idea {
  project {
    jdkName = JavaVersion.VERSION_1_8.toString()
    languageLevel = JavaVersion.VERSION_1_8.toString()
  }
}

ext {

}

try {
  new ByteArrayOutputStream().withStream { os ->
    exec {
      standardOutput = os
      commandLine = ['git', 'rev-parse', '--verify', 'HEAD']
      println "getting current commit SHA..."
      println "> ${commandLine.join(' ')}"
    }
    gitSha = new Scanner(os.toString()).nextLine()
    println "gitSha: ${gitSha}"
  }
} catch (e) {
  println "failed to get current commit SHA: $e"
}

try {
  new ByteArrayOutputStream().withStream { os ->
    exec {
      standardOutput = os
      commandLine = ['git', 'tag', '--points-at', 'HEAD']
      println "getting current tags..."
      println "> ${commandLine.join(' ')}"
    }
    gitTags = os.toString().split('\n').findAll { !it.isAllWhitespace() }
    println "gitTags: ${gitTags}"
  }
} catch (e) {
  println "failed to get git tags: $e"
}

subprojects {

  apply plugin: "java"

  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8

  ext {
    pckg = "${project.parent.pckg}.${codeFormatter.packageName(project.name)}"
    pckgDir = pckg.replace('.', '/')
  }

  sourceSets.main.java.srcDirs = ['src']
  sourceSets.main.resources.srcDirs = ['res']
  sourceSets.test.java.srcDirs = ['tests/src']
  sourceSets.test.resources.srcDirs = ['tests/res']


  apply plugin: "kotlin"

  kotlin {
    experimental {
      coroutines 'enable'
    }
  }

  tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
      jvmTarget = JavaVersion.VERSION_1_8
    }
  }

  sourceSets.main.kotlin.srcDirs = sourceSets.main.java.srcDirs
  sourceSets.test.kotlin.srcDirs = sourceSets.test.java.srcDirs

  // TODO: fix it
  compileKotlin {
    compileJava.dependsOn it
    destinationDir = compileJava.destinationDir
  }
  compileTestKotlin {
    compileTestJava.dependsOn it
    destinationDir = compileTestJava.destinationDir
  }


  apply plugin: "kotlin-kapt"

  kapt {
    generateStubs = true
    correctErrorTypes = true
  }

  afterEvaluate {
    tasks.withType(KaptTask)*.group("codegen")
    tasks.withType(KaptGenerateStubsTask)*.group("codegen")
  }

  task createDefaultProjectStructure {
    group 'codegen'
    doLast {
      println "creating default project structure for project '${project.name}'..."

      // create directories for all source sets
      sourceSets.forEach { sourceSet ->
        sourceSet.java.srcDirs.forEach {
          def pathToCreate = new File(it, pckgDir)
          println "creating sources path for '${sourceSet.name}': '$pathToCreate'"
          pathToCreate.mkdirs()
        }
        sourceSet.resources.srcDirs.forEach {
          def pathToCreate = new File(it, pckgDir)
          println "creating resources path for '${sourceSet.name}': '$pathToCreate'"
          pathToCreate.mkdirs()
        }
      }

      // generate build.gradle
      if (!file("build.gradle").exists() && file("build.template.gradle").exists()) {
        println "creating build.gadle: '${file('build.gradle')}'"
        transform {
          template = rootProject.file('build.template.gradle')
          output = file('build.gradle')
        }
      }
    }
  }

  sourceSets.all { sourceSet ->
    def n = sourceSet.name
    n = n != "main" ? n.capitalize() : ""
    def taskName = "generate${n}Code"
    println "defining task: '${project.name}:${taskName}'"
    def t = task "generate${n}Code"() {
      group 'codegen'
    }
    tasks["compile${n}Java"].dependsOn t
    tasks["compile${n}Kotlin"].dependsOn t
  }

  def protoDir = file("grpc")
  def protoFiles = fileTree(protoDir) {
    include "**/*.proto"
  }
  if (!protoFiles.empty) {
    apply plugin: 'com.google.protobuf'

    protobuf {
      protoc {
        artifact = "com.google.protobuf:protoc:$protocVersion"
      }
      plugins {
        grpc {
          artifact = "io.grpc:protoc-gen-grpc-java:$grpcVersion"
        }
      }
      generateProtoTasks {
        all().each { task ->
          task.group = 'protobuf'
          task.plugins {
            grpc {

            }
          }
        }
      }
    }

    tasks.withType(com.google.protobuf.gradle.ProtobufExtract).all {
      group 'protobuf'
    }

    sourceSets {
      main {
        proto {
          srcDirs = ["grpc"]
        }
      }
    }
  }

  test {
    testLogging {
      events "STARTED", "PASSED", "SKIPPED", "FAILED", "STANDARD_OUT", "STANDARD_ERROR"
    }
  }

  repositories {
    jcenter()
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
  }

  // main dependencies
  dependencies {
    compile "org.slf4j:slf4j-api:$slf4jVersion"
    compile "org.slf4j:slf4j-jdk14:$slf4jVersion"
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutinesVersion"

    //compile "io.grpc:grpc-core:$grpcVersion"
    compile "io.grpc:grpc-stub:$grpcVersion"
    compile "io.grpc:grpc-protobuf:$grpcVersion"
    compile "io.grpc:grpc-netty:$grpcVersion"

    compile satoriLibsAsyncKotlin()
    compile satoriLibsCommonKotlin()

    compile "com.google.dagger:dagger:$daggerVersion"
    compile "com.google.errorprone:error_prone_core:$errorProneVersion"

    compile "com.google.protobuf:protobuf-java:$protobufVersion"

  }

  // test dependencies
  dependencies {
    testCompile "junit:junit:$junitVersion"
  }

  // kapt dependencies
  dependencies {
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
  }


}

